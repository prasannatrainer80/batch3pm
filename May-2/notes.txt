Object Oriented Programming : It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics known as 

	  (i) State

	 (ii) Behaviour

	(iii) Identity

OOPs features : 
________________

	1) Encapsulation : Wrapping up of data and functions into a single unit known
				as encapsulation. 

	2) Abstraction   : Hiding the irrelevant details of an object, that do not contribute to its essential 				characterstics known as abstraction.

	   *** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the 		irrelevant details ***

	3) Inheritance : Deriving a new entity from already existing entity, known as inheritance, through 			inheritance we can reduce the size of the program.

	4) Polymorphism : The ability to take more than one form known as polymorphism. 


class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name {
     data members;
     member functions;
}

Why Java : 
___________

(i) Platform Independence : Write Once and run anywhere. 

(ii) Console, Windows, Web, Mobile Apps, Service Oriented 

(iii) Packages : Contains group of classes, that which belongs to one common group. If you want to overcome the naming conflicts between classes, then we need the help of packages. 

Java Features : 
_________________

(i) Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal details like memory management etc... as how much memory allocated to run the program, the same amount of memory will be reallocated automatically.  

(ii) Object Oriented :  Java supports all object oriented programming features. 

(iii) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created.  In interpretation, it reads the bytecode line by line and executes.  

(iv) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any env. without changing the source code. 

(v) Securable : Java implements various levels of security as 

		(i) Compiler Level Security : 

		(ii) Bytecode Level

		(iii) Class Loader Level Security 

(vi) Distributed : By using java, we can implement all distributed and robust applications. 

Java Architecture : 
____________________

	(i) Java Program : Java code, that which stored with extension .java

	(ii) Java Class : Java code after compilation its converted into bytecode, 
				then .class file will be created. 

	(iii) JVM (Java Virtual Machine) 

		It contains various components as 

			(a) Class Loader : used to load all classes that which are required to run the program.  There are 2 types of class loaders known as 

				(i) Primordial Class Loader : Used to load all predefined classes. 

				(ii) Class Loader Objects : Used to load all user-defined classes. 

			(b) JIT Compiler : Converts bytecode into CPU specific format. 

			(c) Execution Manager : Contains QUEUE of programs which are ready to run, where we can execute the program.  Before execution program needs to undergone security authentication. 

	 (iv) Java API : It provides runtime env, that which allows you to run the 
				java programs. It contains 2 things as

				 (i) JDK (Java Development Kit) 

				(ii) JRE (Java Runtime Enviro

DataTypes : There are various types of data types as

	(i) Value Types : byte, int, long, float, double, char, boolean

	(ii) Reference Types  : String, Object and user-defined types

System.out.println() -> Used to display any value or message. 

	System -> class
	out -> Console
	println() -> Method. 

How to define method main() as 

public static void main(String[] args) {
...
...
...
}

main() method must be static as no class object supposed to call method main().

Operators : 
____________

1) Arithmetical Operators

	+	-> Addition

	-	-> Subtraction

	*	-> Multiplication

	/	-> Division

	%	-> Remainder


2) Relational Operators

	> 	-> greater than

	< 	-> less than

	>= 	-> greater than or equals to

	<=	-> Less than or equals to

	==	-> Equals to 

3) Logical Operators

	&& 	-> And

	||	-> Or

	!	-> Not

4) Assignment Operator
	
	= -> Known as assignment operator.

5) Increment/Decrement Operators 

	int x = 3;
	x++ // post increment
	++x // pre increment

*** What is the diff. between post increment/pre increment 


In post-increment, at first the value will be initialized and incremented next,
but in pre-increment, at first the value will be increment and then initialized. 

In post-increment, the updated value effect in next statement or next operator comes.

class Quiz1 {
	public static void main(String[] args) {
	   System.out.println("5"+3+8);  // 538
	   System.out.println("5" +(3+8)); // 511
	   System.out.println("5+3"+8); // 5+38
	}
}

class Quiz2 {
	public static void main(String[] args) {
	  int x;
	  System.out.println(x);
	}
}












































